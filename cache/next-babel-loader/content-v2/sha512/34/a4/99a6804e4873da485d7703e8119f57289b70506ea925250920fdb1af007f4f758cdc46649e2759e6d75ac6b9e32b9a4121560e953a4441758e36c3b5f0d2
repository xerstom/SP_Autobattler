{"ast":null,"code":"import { COLOR_HEX, CONFIG } from \"../utils/constants.js\";\n/**\n *\n * @prop {String} name\n * @prop {String} color\n * @prop {Number} life Current Agent life\n * @prop {Object} strategy\n * @prop {Object} position Agent position\n * @prop {Number} position.x\n * @prop {Number} position.y\n * @prop {Number} boardSize Current board size\n * @prop {Number} level Current level (card level max)\n * @prop {Number} money Current money\n * @prop {Number} boardUpPrice Price for a bordSize up\n * @prop {Number} levelUpPrice Price for a level up\n * @prop {Array<GameCard>} board\n * @prop {Array<GameCard>} bench\n *\n * @class Agent\n */\n\nclass Agent {\n  constructor(color) {\n    this.name = `Mr ${color.charAt(0).toUpperCase() + color.slice(1)}`;\n    this.color = COLOR_HEX[color];\n    this.life = CONFIG.BASE_LIFE;\n    this.boardSize = CONFIG.BASE_BOARD_PLACE;\n    this.level = 1;\n    this.money = CONFIG.BASE_MONEY;\n    this.boardUpPrice = CONFIG.BASE_BOARD_UP_PRICE;\n    this.levelUpPrice = CONFIG.BASE_LEVEL_UP_PRICE;\n    this.board = [];\n    this.bench = []; // list of cards on bench\n  }\n  /**\n   * wether the card already exist in board / bench\n   *\n   * @param {GameCard} card\n   * @returns {Array<GameCard, String>} [card, location]\n   * @memberof Agent\n   */\n\n\n  cardExist(card) {\n    const res = [null, \"\"];\n    res[0] = this.board.find(c => c.name === card.name);\n\n    if (res[0]) {\n      res[1] = \"board\";\n    } else {\n      res[0] = this.bench.find(c => c.name === card.name);\n\n      if (res[0]) {\n        res[1] = \"bench\";\n      }\n    }\n\n    return res;\n  }\n\n  upLevel() {\n    this.level++;\n    this.levelUpPrice = Math.round(this.levelUpPrice * CONFIG.LEVEL_UP_MULTIPLIER);\n  }\n\n  upBoard() {\n    this.boardSize++;\n    this.boardUpPrice = Math.round(this.boardUpPrice * CONFIG.BOARD_UP_MULTIPLIER);\n  }\n\n  hasEnoughMoney(money) {\n    return this.money >= money;\n  }\n\n  isBoardFull() {\n    return this.board.length === this.boardSize;\n  }\n\n  isBenchFull() {\n    return this.bench.length === CONFIG.MAX_BENCH_PLACE;\n  }\n\n  isLevelMax() {\n    return this.level === CONFIG.MAX_LEVEL;\n  }\n\n  isBoardSizeMax() {\n    return this.boardSize === CONFIG.MAX_BOARD_PLACE;\n  }\n\n  setBoard(board) {\n    this.board = board;\n  }\n\n  addBoard(card) {\n    this.board.push(card);\n  }\n\n  addBench(card) {\n    this.bench.push(card);\n  }\n\n  rmBoard(index) {\n    return this.board.splice(index, 1)[0];\n  }\n\n  rmBench(index) {\n    return this.bench.splice(index, 1)[0];\n  }\n\n  increaseMoney(money) {\n    this.money += money;\n  }\n\n  decreaseMoney(money) {\n    this.money -= money;\n  }\n\n  decreaseLife(life) {\n    this.life -= life;\n  }\n\n  setNewGamingBoard(board, bench) {\n    this.board = board;\n    this.bench = bench;\n  }\n\n}\n\nexport default Agent;","map":null,"metadata":{},"sourceType":"module"}