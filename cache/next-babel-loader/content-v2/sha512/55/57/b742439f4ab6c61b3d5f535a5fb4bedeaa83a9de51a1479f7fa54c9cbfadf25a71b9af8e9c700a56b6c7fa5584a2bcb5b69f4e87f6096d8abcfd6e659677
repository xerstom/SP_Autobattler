{"ast":null,"code":"import { generateGameCard, generateGameCards, generateTemplateCards } from \"../factory/CardFactory.js\";\nimport Manager from \"../Manager.js\";\nimport { CONFIG } from \"../utils/constants.js\";\n\nclass CardManager extends Manager {\n  constructor(gameManager) {\n    super(gameManager);\n    this.templates = generateTemplateCards(CONFIG.TEMPLATE_CARDS);\n    this.marketCards = new Map();\n    this.buffPercentage = CONFIG.BUFF_PERCENTAGE;\n  } // init\n\n\n  init() {\n    this.m.getAgents().forEach(e => this.initCards(e, CONFIG.BASE_CARDS));\n  }\n\n  initCards(agent, x) {\n    agent.setBoard(generateGameCards(x, this.templates));\n    this.setMarket(agent.name, generateGameCard(this.templates, 1));\n  } // setters / getters\n\n\n  setMarket(name, card) {\n    this.marketCards.set(name, card);\n  }\n\n  getMarketCard(name) {\n    return this.marketCards.get(name);\n  }\n\n  getTemplate(predicate) {\n    return this.templates.find(predicate);\n  } // Management\n\n\n  rerollMarketCard(agent) {\n    this.setMarket(agent.name, generateGameCard(this.templates, agent.level));\n  }\n\n  rerollCard(agent) {\n    if (agent.hasEnoughMoney(CONFIG.REROLL_PRICE)) {\n      agent.decreaseMoney(CONFIG.REROLL_PRICE);\n      this.rerollMarketCard(agent);\n      return true;\n    }\n\n    return false;\n  }\n\n  getPercentageBuff(marketCard) {\n    return Math.round((marketCard.life + marketCard.attack) * this.buffPercentage);\n  }\n\n  buyCard(agent) {\n    const res = [false, \"\"];\n    const marketCard = this.getMarketCard(agent.name);\n\n    if (!agent.hasEnoughMoney(marketCard.price)) {\n      return res;\n    }\n\n    const [existing, location] = agent.cardExist(marketCard);\n\n    if (existing) {\n      existing.buff(this.getPercentageBuff(marketCard));\n      res[1] = location;\n    } else if (agent.isBoardFull()) {\n      if (agent.isBenchFull()) {\n        return res;\n      }\n\n      agent.addBench(marketCard);\n      res[1] = \"bench\";\n    } else {\n      agent.addBoard(marketCard);\n      res[1] = \"board\";\n    }\n\n    res[0] = true;\n    agent.decreaseMoney(marketCard.price);\n    this.rerollMarketCard(agent);\n    return res;\n  }\n\n  sellCard(agent, index, location) {\n    let card = null;\n\n    if (location === \"board\") {\n      card = agent.rmBoard(index);\n    } else if (location === \"bench\") {\n      card = agent.rmBench(index);\n    } else {\n      return false;\n    }\n\n    agent.increaseMoney(card.price);\n    return true;\n  }\n\n  swapCard(agent, index, location) {\n    let card = null;\n\n    if (location === \"board\" && !agent.isBenchFull()) {\n      card = agent.rmBoard(index);\n      agent.addBench(card);\n    } else if (location === \"bench\" && !agent.isBoardFull()) {\n      card = agent.rmBench(index);\n      agent.addBoard(card);\n    } else {\n      return false;\n    }\n\n    return true;\n  }\n\n  optimizeBoards(board, bench, boardMaxlength) {\n    const cards = [...board, ...bench];\n    cards.sort((a, b) => b.stats - a.stats);\n    const updatedBoard = cards.slice(0, boardMaxlength);\n    const updatedBench = cards.slice(boardMaxlength);\n    return [updatedBoard, updatedBench];\n  }\n\n}\n\nexport default CardManager;","map":null,"metadata":{},"sourceType":"module"}