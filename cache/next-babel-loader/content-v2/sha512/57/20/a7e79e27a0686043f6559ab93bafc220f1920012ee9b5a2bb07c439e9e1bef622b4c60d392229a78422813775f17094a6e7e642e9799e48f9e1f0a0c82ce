{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport FightCard from \"../cards/FightCard.js\";\nimport GameCard from \"../cards/GameCard.js\";\nimport TemplateCard from \"../cards/TemplateCard.js\";\nimport { displays, LEVEL_INCR, LEVEL_PROPORTION } from \"../utils/constants.js\";\nimport { rand } from \"../utils/utils.js\";\n\nfunction createTemplateCard(name, level, display) {\n  return new TemplateCard(name, level, display);\n}\n\nexport function generateTemplateCards(x) {\n  var cards = [];\n\n  var displaysIndexes = _toConsumableArray(Array(x).keys());\n\n  var incr = 0;\n\n  for (var j = 0; j < LEVEL_PROPORTION.length; ++j) {\n    var nCard = Math.floor(x * LEVEL_PROPORTION[j]);\n\n    for (var i = 0; i < nCard; ++i, ++incr) {\n      var r = rand(0, displaysIndexes.length - 1);\n      cards.push(createTemplateCard(incr, j, displays[displaysIndexes[r]]));\n      displaysIndexes.splice(r, 1);\n    }\n  }\n\n  return cards;\n}\n\nfunction createGameCard(template) {\n  return new GameCard(template.name, template.level, template.attack, template.life, template.adaptative, template.price, template.displayName, template.displayImage);\n}\n\nexport function generateGameCard(templates, level) {\n  var max = Math.floor(templates.length * LEVEL_INCR[level - 1]);\n  var index = rand(0, max - 1);\n  return createGameCard(templates[index]);\n}\nexport function generateGameCards(x, templates) {\n  var cards = [];\n\n  for (var i = 0; i < x; ++i) {\n    cards.push(generateGameCard(templates, 1));\n  }\n\n  return cards;\n}\n\nfunction createFightCard(gameCard) {\n  return new FightCard(gameCard.name, gameCard.displayName, gameCard.attack, gameCard.life);\n}\n\nexport function generateFightCards(board) {\n  var cards = [];\n\n  var _iterator = _createForOfIteratorHelper(board),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var card = _step.value;\n      cards.push(createFightCard(card));\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return cards;\n}","map":null,"metadata":{},"sourceType":"module"}