{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\n/* eslint-disable no-magic-numbers */\nimport { Button, GridItem } from \"@chakra-ui/react\";\nimport React, { useState } from \"react\";\n\nconst percentageCalc = (colors, i) => Math.round(100 / colors.length) * (i + 1);\n\nconst colorCalc = colors => {\n  if (colors.length === 1) {\n    return colors[0];\n  }\n\n  let str = `linear-gradient(${colors.length === 2 ? 45 : 90}deg`;\n\n  for (let i = 0; i < colors.length - 1; i++) {\n    str += `, ${colors[i]} ${percentageCalc(colors, i)}%, ${colors[i + 1]} ${percentageCalc(colors, i)}%`;\n  }\n\n  return `${str});`;\n};\n\nconst Box = props => {\n  const {\n    x,\n    y,\n    selectable,\n    colors,\n    perc,\n    disable,\n    activeColors\n  } = props;\n  const {\n    0: colorBg,\n    1: setColor\n  } = useState(null);\n\n  const handleOnClick = () => {\n    if (!selectable(x, y)) {\n      setTimeout(() => setColor(null), 400);\n      setColor(\"red\");\n    }\n  };\n\n  const bgColor = colorCalc(colors);\n  let activeColor = colorCalc(activeColors);\n\n  if (!bgColor.includes(\"%\")) {\n    activeColor = activeColor !== bgColor ? activeColor : \"black\";\n  }\n\n  return /*#__PURE__*/_jsx(GridItem, {\n    h: `${perc}vw`,\n    w: `${perc}vw`,\n    border: `solid ${activeColor} ${activeColor === \"black\" ? \"1px\" : \"5px\"}`,\n    borderRadius: \"none\",\n    _active: {\n      borderColor: activeColor // borderColor: \"#FF0000\",\n\n    },\n    _focus: {\n      borderColor: activeColor // borderColor: \"#FF0000\",\n\n    },\n    children: /*#__PURE__*/_jsx(Button, {\n      disabled: disable,\n      borderRadius: \"none\",\n      bg: colorBg !== null && colorBg !== void 0 ? colorBg : bgColor,\n      w: \"100%\",\n      h: \"100%\",\n      _hover: {\n        bg: colorBg !== null && colorBg !== void 0 ? colorBg : bgColor\n      },\n      _active: {},\n      _focus: {},\n      onClick: handleOnClick\n    })\n  });\n};\n\nexport default Box;","map":null,"metadata":{},"sourceType":"module"}