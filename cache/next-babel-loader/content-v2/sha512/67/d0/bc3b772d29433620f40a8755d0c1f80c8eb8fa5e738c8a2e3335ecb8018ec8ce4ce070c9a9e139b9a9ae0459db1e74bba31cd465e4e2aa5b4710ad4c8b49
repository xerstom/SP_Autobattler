{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport Manager from \"../Manager.js\";\nimport { CONFIG } from \"../utils/constants.js\";\nimport { absDistance, rand } from \"../utils/utils.js\";\n\nfunction generatePosition(borders) {\n  return rand(borders.x1, borders.x2);\n}\n\nvar PositionManager = /*#__PURE__*/function (_Manager) {\n  _inherits(PositionManager, _Manager);\n\n  var _super = _createSuper(PositionManager);\n\n  function PositionManager(gameManager) {\n    var _this;\n\n    _classCallCheck(this, PositionManager);\n\n    _this = _super.call(this, gameManager);\n    _this.positions = new Map();\n    _this.movementPoints = CONFIG.MOVEMENT_POINTS;\n    return _this;\n  }\n\n  _createClass(PositionManager, [{\n    key: \"init\",\n    value: function init() {\n      var agents = this.m.getAgents();\n\n      for (var i = 0; i < agents.length; i++) {\n        this.setPosition(agents[i].name, i, generatePosition(this.m.mapManager.borders));\n      }\n    }\n  }, {\n    key: \"getMovementPoints\",\n    value: function getMovementPoints() {\n      return this.movementPoints;\n    }\n  }, {\n    key: \"setPosition\",\n    value: function setPosition(name, x, y) {\n      this.positions.set(name, {\n        name: name,\n        x: x,\n        y: y\n      });\n    }\n  }, {\n    key: \"getPosition\",\n    value: function getPosition(name) {\n      return this.positions.get(name);\n    }\n  }, {\n    key: \"getAllPosition\",\n    value: function getAllPosition() {\n      return _toConsumableArray(this.positions.values());\n    }\n  }, {\n    key: \"samePosition\",\n    value: function samePosition(a, b) {\n      var aPos = this.getPosition(a.name);\n      var bPos = this.getPosition(b.name);\n      return aPos.x === bPos.x && aPos.y === bPos.y;\n    } // TODO: verifier avec les borders?\n\n  }, {\n    key: \"canMove\",\n    value: function canMove(name, x, y) {\n      var position = this.getPosition(name);\n      return Math.abs(x - position.x) + Math.abs(y - position.y) <= this.movementPoints;\n    }\n  }, {\n    key: \"moveBots\",\n    value: function moveBots(agents) {\n      var _iterator = _createForOfIteratorHelper(agents),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var agent = _step.value;\n          var newPos = agent.strategy.getPos(this, this.m.mapManager, agent);\n          this.move(agent, newPos);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"move\",\n    value: function move(agent, position) {\n      if (this.canMove(agent.name, position.x, position.y)) {\n        this.setPosition(agent.name, position.x, position.y);\n      }\n    }\n  }, {\n    key: \"getAgentsInRange\",\n    value: function getAgentsInRange(agent) {\n      var _this2 = this;\n\n      return this.m.getPriorAgents(agent).filter(function (a) {\n        return _this2.isInMoveDistance(a, agent);\n      });\n    }\n  }, {\n    key: \"isInMoveDistance\",\n    value: function isInMoveDistance(a, b) {\n      var aPos = this.getPosition(a.name);\n      var bPos = this.getPosition(b.name);\n      return absDistance(aPos.x, bPos.x) + absDistance(aPos.y, bPos.y) <= this.movementPoints;\n    }\n  }, {\n    key: \"getClosestPosition\",\n    value: function getClosestPosition(srcPos, targetPos, mapManager) {\n      var xMove = srcPos.x < targetPos.x ? Math.round(this.movementPoints / 2) : -Math.round(this.movementPoints / 2);\n      xMove = this.reAdjustPosition(srcPos.x, targetPos.x, xMove); // Mp left to move\n\n      var mpLeft = this.movementPoints - Math.abs(xMove);\n      var yMove = srcPos.y < targetPos.y ? mpLeft : -mpLeft;\n      yMove = this.reAdjustPosition(srcPos.y, targetPos.y, yMove);\n      mpLeft = mpLeft - Math.abs(yMove) > 0 ? mpLeft : 0; // While we have mp to use\n\n      while (mpLeft > 0) {\n        // if we are not at the x pos\n        if (xMove + srcPos.x !== targetPos.x) {\n          xMove > 0 ? xMove++ : xMove--;\n          mpLeft--;\n        } else if (yMove + srcPos.y !== targetPos.y) {\n          // if we are not at the x pos\n          yMove > 0 ? yMove++ : yMove--;\n          mpLeft--;\n        } else {\n          // We are at the exact pos\n          break;\n        }\n      }\n\n      return {\n        x: srcPos.x + xMove,\n        y: srcPos.y + yMove\n      };\n    }\n  }, {\n    key: \"reAdjustPosition\",\n    value: function reAdjustPosition(curPos, posToGo, move) {\n      if (curPos < posToGo) {\n        // If we are left from the posToGo\n        if (curPos + move > posToGo) {\n          // If we went beyond posToGo\n          move = posToGo - curPos;\n        }\n      } else if (curPos - move < posToGo) {\n        // If we are right from the posToGo\n        // If we went beyond posToGo\n        move = curPos - posToGo;\n      }\n\n      return move;\n    }\n  }]);\n\n  return PositionManager;\n}(Manager);\n\nexport default PositionManager;","map":null,"metadata":{},"sourceType":"module"}