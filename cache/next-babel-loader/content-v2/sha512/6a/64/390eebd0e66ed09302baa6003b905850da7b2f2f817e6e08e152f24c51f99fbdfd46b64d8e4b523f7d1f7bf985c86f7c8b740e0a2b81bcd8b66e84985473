{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Manager from \"../Manager.js\";\nimport { CONFIG } from \"../utils/constants.js\";\nimport { rand } from \"../utils/utils.js\";\n\nfunction generateNextBorders(border) {\n  const nextBorders = _objectSpread({}, border);\n\n  const xOry = rand(0, 1);\n  const oneOrTwo = rand(1, 2);\n  const toChange = `${xOry === 0 ? \"x\" : \"y\"}${oneOrTwo}`;\n  oneOrTwo === 1 ? nextBorders[toChange]++ : nextBorders[toChange]--;\n  return nextBorders;\n}\n\nclass MapManager extends Manager {\n  constructor(gameManager) {\n    super(gameManager);\n    this.gridSize = CONFIG.GRID_SIZE;\n    this.borders = {\n      x1: 0,\n      x2: this.gridSize - 1,\n      y1: 0,\n      y2: this.gridSize - 1\n    };\n    this.nextBorders = generateNextBorders(this.borders);\n  }\n\n  init() {//\n  }\n\n  getGridSize() {\n    return this.gridSize;\n  }\n\n  getBorders() {\n    return this.borders;\n  }\n\n  getNextBorders() {\n    return this.nextBorders;\n  }\n\n  generateNewBorders() {\n    this.borders = this.nextBorders;\n    this.nextBorders = generateNextBorders(this.borders);\n  }\n\n  isOutsideBorders(x, y, borders) {\n    return x < borders.x1 || x > borders.x2 || y < borders.y1 || y > borders.y2;\n  }\n\n  isDisabled(x, y) {\n    return this.isOutsideBorders(x, y, this.borders);\n  }\n\n  willBeDisabled(x, y) {\n    return this.isOutsideBorders(x, y, this.nextBorders);\n  }\n\n  validPositions(agents) {\n    return agents.filter(a => !this.willBeDisabled(a.x, a.y));\n  }\n\n}\n\nexport default MapManager;","map":null,"metadata":{},"sourceType":"module"}