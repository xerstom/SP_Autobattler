{"ast":null,"code":"import generateAgents from \"../factory/AgentFactory.js\";\nimport Manager from \"../Manager.js\";\nimport { COLORS, CONFIG } from \"../utils/constants.js\";\n\nclass AgentManager extends Manager {\n  constructor(gameManager) {\n    super(gameManager);\n    this.agents = generateAgents(CONFIG.AGENTS, COLORS);\n  }\n\n  init() {//\n  }\n\n  getAll() {\n    return this.agents;\n  }\n\n  getSorted() {\n    return [...this.agents].sort((a, b) => b.life - a.life);\n  }\n\n  getPrior(agent) {\n    const sorted = this.getSorted();\n    const index = sorted.findIndex(a => a.name === agent.name);\n    return sorted.slice(0, index);\n  }\n\n  getLater(agent) {\n    const sorted = this.getSorted();\n    const index = sorted.findIndex(a => a.name === agent.name);\n    return sorted.slice(index, sorted.length);\n  }\n\n  getPlayer() {\n    return this.agents[0];\n  }\n\n  getBots() {\n    return this.agents.slice(1);\n  }\n\n  get(predicate) {\n    return this.agents.find(predicate);\n  }\n\n  getByName(name) {\n    return this.agents.find(a => a.name === name);\n  }\n\n  boardUp(agent) {\n    if (!agent.isBoardSizeMax() && agent.hasEnoughMoney(agent.boardUpPrice)) {\n      agent.decreaseMoney(agent.boardUpPrice);\n      agent.upBoard();\n      return true;\n    }\n\n    return false;\n  }\n\n  levelUp(agent) {\n    if (!agent.isLevelMax() && agent.hasEnoughMoney(agent.levelUpPrice)) {\n      agent.decreaseMoney(agent.levelUpPrice);\n      agent.upLevel();\n      return true;\n    }\n\n    return false;\n  }\n\n  buy(agent, action) {\n    return this[action](agent);\n  }\n\n  increaseMoneyForAllAgents(moneyToAdd) {\n    this.agents.forEach(a => a.increaseMoney(moneyToAdd));\n  }\n\n}\n\nexport default AgentManager;","map":null,"metadata":{},"sourceType":"module"}