{"ast":null,"code":"import AgentManager from \"./agents/AgentManager.js\";\nimport BattleManager from \"./battles/BattleManager.js\";\nimport CardManager from \"./cards/CardManager.js\";\nimport GameLoop from \"./GameLoop.js\";\nimport MapManager from \"./map/MapManager.js\";\nimport PositionManager from \"./positions/PositionManager.js\";\n/**\n *\n * @prop {Array<Agent>} agents\n * @prop {Array<CardTemplate>} templates\n * @class GameManager\n */\n\nclass GameManager {\n  constructor() {\n    this.agentManager = new AgentManager(this);\n    this.positionManager = new PositionManager(this);\n    this.cardManager = new CardManager(this);\n    this.mapManager = new MapManager(this);\n    this.battleManager = new BattleManager(this);\n    this.gameLoop = new GameLoop(this);\n    this.laterAgentsCache = [];\n  } // lifecycle\n\n\n  init() {\n    this.agentManager.init();\n    this.cardManager.init();\n    this.mapManager.init();\n    this.positionManager.init();\n    this.battleManager.init();\n  }\n\n  start() {\n    this.gameLoop.start();\n  } // GAMELOOP\n\n\n  next(selectedBox = null) {\n    return this.gameLoop.next(selectedBox);\n  } // AGENTS\n\n\n  getAgent(name) {\n    if (!name) {\n      return this.agentManager.getPlayer();\n    }\n\n    return this.agentManager.getByName(name) || this.agentManager.getPlayer();\n  }\n\n  getPlayer() {\n    return this.agentManager.getPlayer();\n  }\n\n  getAgents() {\n    return this.agentManager.getAll();\n  }\n\n  getPriorAgents(agent) {\n    return this.agentManager.getPrior(agent || this.agentManager.getPlayer());\n  }\n\n  getLaterAgentsCache() {\n    return this.laterAgentsCache;\n  }\n\n  setLaterAgentsCache(agent) {\n    this.laterAgentsCache = this.agentManager.getLater(agent || this.agentManager.getPlayer());\n  }\n\n  getLaterAgents(agent) {\n    return this.agentManager.getLater(agent || this.agentManager.getPlayer());\n  }\n\n  getBots() {\n    return this.agentManager.getBots();\n  } // POSITION\n\n\n  getPosition(agent) {\n    return this.positionManager.getPosition(agent.name);\n  }\n\n  movePlayer(position) {\n    this.positionManager.move(this.agentManager.getPlayer(), position);\n  }\n\n  movePriorAgents() {\n    this.positionManager.moveBots(this.agentManager.getPrior(this.agentManager.getPlayer()));\n  }\n\n  moveLaterAgents() {\n    this.positionManager.moveBots(this.agentManager.getLater(this.agentManager.getPlayer()).slice(1));\n  }\n\n  canPlayerMove(x, y) {\n    return this.positionManager.canMove(this.agentManager.getPlayer().name, x, y);\n  }\n\n  samePosition(agent1, agent2) {\n    return this.positionManager.samePosition(agent1, agent2);\n  } // getters\n\n\n  getMovementPoints() {\n    return this.positionManager.getMovementPoints();\n  }\n\n  getNextBorders() {\n    return this.mapManager.getNextBorders();\n  }\n\n  getGridSize() {\n    return this.mapManager.getGridSize();\n  }\n\n  getMarketCard() {\n    return this.cardManager.getMarketCard(this.agentManager.getPlayer().name);\n  } // CARDS\n\n\n  rerollCard(agent) {\n    return this.cardManager.rerollCard(agent || this.agentManager.getPlayer());\n  }\n\n  buyCard(agent) {\n    return this.cardManager.buyCard(agent || this.agentManager.getPlayer());\n  }\n\n  sellCard(index, location) {\n    return this.cardManager.sellCard(this.agentManager.getPlayer(), index, location);\n  }\n\n  swapCard(index, location) {\n    return this.cardManager.swapCard(this.agentManager.getPlayer(), index, location);\n  } // MAP\n\n\n  isDisabled(x, y) {\n    return this.mapManager.isDisabled(x, y);\n  }\n\n  willBeDisabled(x, y) {\n    return this.mapManager.willBeDisabled(x, y);\n  }\n\n  generateNewBorders() {\n    this.mapManager.generateNewBorders();\n  } // Profile\n\n\n  levelUp(agent) {\n    return this.agentManager.levelUp(agent || this.agentManager.getPlayer());\n  }\n\n  boardUp(agent) {\n    return this.agentManager.boardUp(agent || this.agentManager.getPlayer());\n  } // battle\n\n\n  getBattleSummary() {\n    return this.battleManager.summary();\n  }\n\n  battle() {\n    this.battleManager.setup();\n    this.battleManager.battleAll();\n  }\n\n}\n\nexport default GameManager;","map":null,"metadata":{},"sourceType":"module"}