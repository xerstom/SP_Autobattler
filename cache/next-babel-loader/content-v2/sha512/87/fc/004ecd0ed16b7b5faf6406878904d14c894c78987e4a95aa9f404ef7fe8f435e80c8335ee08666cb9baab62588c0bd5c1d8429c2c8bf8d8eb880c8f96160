{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\n/* eslint-disable no-magic-numbers */\nimport { Box, Button, Flex } from \"@chakra-ui/react\";\nimport React, { useState } from \"react\";\nimport LogOutput from \"../LogOutput.jsx\";\nimport AgentDisplayer from \"./AgentDisplayer/AgentDisplayer.jsx\";\nimport Grid from \"./Grid/Grid.jsx\";\nconst TIMEOUT_MOVEMENT = 1000;\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nconst GamingMap = props => {\n  const {\n    gInterface,\n    onClickHandler\n  } = props;\n  const {\n    0: selectedBox,\n    1: setSelectedBox\n  } = useState(null);\n  const {\n    0: isNextButtonDisabled,\n    1: setNextButtonDisabled\n  } = useState(false);\n  const {\n    0: agentsPosition,\n    1: setAgentsPosition\n  } = useState(gInterface.getAgentsPosition());\n  const {\n    0: agents,\n    1: setAgents\n  } = useState(gInterface.getAgentsProfile());\n  const {\n    0: battleSummary,\n    1: setBattleSummary\n  } = useState(gInterface.getBattleSummary()); // movePriorPlayers\n\n  async function phaseOne() {\n    const l = gInterface.getPriorAgentsPosition();\n\n    for (let i = 0; i < l; ++i) {\n      setAgentsPosition(gInterface.getUpdatedAgentsPosition());\n      await sleep(TIMEOUT_MOVEMENT);\n    }\n  } // moveLaterPlayers\n  // Fights\n  // Managements\n\n\n  async function phaseTwo() {\n    const l = gInterface.getLaterAgentsPosition();\n\n    for (let i = 0; i < l; ++i) {\n      setAgentsPosition(gInterface.getUpdatedAgentsPosition());\n      await sleep(TIMEOUT_MOVEMENT);\n    }\n\n    setBattleSummary([]);\n    const summary = gInterface.getBattleSummary();\n\n    for (const sum of summary) {\n      battleSummary.push(sum);\n      setBattleSummary([...battleSummary]);\n      await sleep(400);\n    }\n\n    setAgents(gInterface.getAgentsProfile());\n  }\n  /**\n   * Main frontend gameloop logic\n   */\n\n\n  const handleNext = async () => {\n    const phase = gInterface.next(selectedBox); // If selectedBox not valid, phase = -1\n\n    if (phase === -1) {\n      return;\n    }\n\n    setNextButtonDisabled(true);\n\n    if (phase === 1) {\n      // waiting for position\n      await phaseOne(); // display enemies movement\n    } else if (phase === 2) {\n      // waiting for next turn\n      setSelectedBox(null);\n      await phaseTwo(); // display battles / management\n    }\n\n    setNextButtonDisabled(false);\n  };\n\n  const selectable = (x, y) => {\n    if (!gInterface.isSelectable(x, y)) {\n      return false;\n    }\n\n    setSelectedBox({\n      x,\n      y\n    });\n    return true;\n  };\n\n  return /*#__PURE__*/_jsxs(Flex, {\n    h: \"100vh\",\n    bg: \"gray.200\",\n    children: [/*#__PURE__*/_jsx(Grid, {\n      gInterface: gInterface,\n      columns: gInterface.getGridSize(),\n      rows: gInterface.getGridSize(),\n      agents: agentsPosition,\n      selectable: selectable,\n      selectedBox: selectedBox\n    }), /*#__PURE__*/_jsxs(Flex, {\n      h: \"70vh\",\n      flexDirection: \"column\",\n      justifyContent: \"space-between\",\n      w: \"100%\",\n      children: [/*#__PURE__*/_jsxs(Flex, {\n        h: \"100%\",\n        alignItems: \"flex-start\",\n        justifyContent: \"space-between\",\n        children: [/*#__PURE__*/_jsx(AgentDisplayer, {\n          agents: agents\n        }), /*#__PURE__*/_jsxs(Flex, {\n          flexDirection: \"column\",\n          justifyContent: \"space-between\",\n          alignItems: \"flex-end\",\n          h: \"100%\",\n          children: [/*#__PURE__*/_jsxs(Button, {\n            w: \"10%\",\n            disabled: isNextButtonDisabled,\n            onClick: onClickHandler,\n            children: [\">>\", \" \"]\n          }), /*#__PURE__*/_jsx(Box, {\n            w: \"7vw\",\n            children: /*#__PURE__*/_jsx(Button, {\n              w: \"100%\",\n              disabled: isNextButtonDisabled,\n              onClick: handleNext,\n              fontSize: \"0.7vw\",\n              children: \"Suivant\"\n            })\n          })]\n        })]\n      }), /*#__PURE__*/_jsx(LogOutput, {\n        minH: \"30vh\",\n        summary: battleSummary\n      })]\n    })]\n  });\n};\n\nexport default GamingMap;","map":null,"metadata":{},"sourceType":"module"}