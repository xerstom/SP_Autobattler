{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/* eslint-disable no-magic-numbers */\nimport { Button, Flex, Grid, GridItem } from \"@chakra-ui/react\";\nimport React, { useEffect, useState } from \"react\";\nimport LogOutput from \"../LogOutput.jsx\";\nimport Bench from \"./Bench/Bench.jsx\";\nimport Board from \"./Board/Board.jsx\";\nimport Management from \"./Management/Management.jsx\";\nimport Market from \"./Market/Market.jsx\";\nimport Profile from \"./Profile/Profile.jsx\";\n\nfunction sleep(ms) {\n  return new Promise(function (resolve) {\n    return setTimeout(resolve, ms);\n  });\n}\n\nvar GamingBoard = function GamingBoard(props) {\n  var gInterface = props.gInterface;\n\n  var _useState = useState(gInterface.getBoard()),\n      playerBoard = _useState[0],\n      setPlayerBoard = _useState[1];\n\n  var _useState2 = useState(gInterface.getBench()),\n      playerBench = _useState2[0],\n      setPlayerBench = _useState2[1];\n\n  var _useState3 = useState(gInterface.getProfile()),\n      playerProfile = _useState3[0],\n      setPlayerProfile = _useState3[1];\n\n  var _useState4 = useState(gInterface.getMarketCard()),\n      marketCard = _useState4[0],\n      setMarketCard = _useState4[1];\n\n  var _useState5 = useState(gInterface.getLastCombat(playerProfile.name)),\n      combatSummary = _useState5[0];\n\n  var _useState6 = useState([]),\n      detailedCombats = _useState6[0],\n      setDetailedCombats = _useState6[1];\n\n  useEffect( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var allSum, combatSum, _iterator, _step, combat;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            allSum = gInterface.getLastCombat(playerProfile.name);\n\n            if (allSum) {\n              _context.next = 3;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 3:\n            combatSum = allSum.detailedCombat;\n            _iterator = _createForOfIteratorHelper(combatSum);\n            _context.prev = 5;\n\n            _iterator.s();\n\n          case 7:\n            if ((_step = _iterator.n()).done) {\n              _context.next = 15;\n              break;\n            }\n\n            combat = _step.value;\n            detailedCombats.push(combat);\n            setDetailedCombats(_toConsumableArray(detailedCombats));\n            _context.next = 13;\n            return sleep(300);\n\n          case 13:\n            _context.next = 7;\n            break;\n\n          case 15:\n            _context.next = 20;\n            break;\n\n          case 17:\n            _context.prev = 17;\n            _context.t0 = _context[\"catch\"](5);\n\n            _iterator.e(_context.t0);\n\n          case 20:\n            _context.prev = 20;\n\n            _iterator.f();\n\n            return _context.finish(20);\n\n          case 23:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[5, 17, 20, 23]]);\n  })), []);\n\n  var sellCard = function sellCard(index, location) {\n    gInterface.sellCard(index, location);\n\n    if (location === \"bench\") {\n      setPlayerBench(gInterface.getBench());\n    } else {\n      setPlayerBoard(gInterface.getBoard());\n    }\n\n    setPlayerProfile(gInterface.getProfile());\n  };\n\n  var swapCard = function swapCard(index, location) {\n    if (gInterface.swapCard(index, location)) {\n      setPlayerBench(gInterface.getBench());\n      setPlayerBoard(gInterface.getBoard());\n    }\n  };\n\n  var rerollNewCard = function rerollNewCard() {\n    setPlayerProfile(gInterface.getProfile());\n    setMarketCard(gInterface.getMarketCard());\n  };\n\n  var reroll = function reroll() {\n    if (gInterface.rerollCard()) {\n      rerollNewCard();\n    }\n  };\n\n  var buy = function buy() {\n    var res = gInterface.buyCard();\n\n    if (!res[0]) {\n      return false;\n    }\n\n    if (res[1] === \"board\") {\n      setPlayerBoard(gInterface.getBoard());\n    } else if (res[1] === \"bench\") {\n      setPlayerBench(gInterface.getBench());\n    }\n\n    setPlayerProfile(gInterface.getProfile());\n    rerollNewCard();\n    return true;\n  };\n\n  var levelUp = function levelUp() {\n    if (gInterface.levelUp()) {\n      setPlayerProfile(gInterface.getProfile());\n    }\n  };\n\n  var boardUp = function boardUp() {\n    if (gInterface.boardUp()) {\n      setPlayerProfile(gInterface.getProfile());\n    }\n  };\n\n  var handleKeyPress = function handleKeyPress(e) {\n    switch (e.code) {\n      case \"KeyR\":\n        {\n          rerollNewCard();\n          break;\n        }\n\n      case \"KeyB\":\n        {\n          buy();\n          break;\n        }\n\n      case \"KeyS\":\n        {\n          boardUp();\n          break;\n        }\n\n      case \"KeyL\":\n        {\n          levelUp();\n          break;\n        }\n    }\n  };\n\n  var onCombat = combatSummary !== null;\n  var agentCombat = combatSummary !== null && (combatSummary.agent1 === playerProfile.name ? combatSummary.agent2 : combatSummary.agent1);\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: /*#__PURE__*/_jsxs(Grid, {\n      templateColumns: \"repeat(25, 4%)\",\n      templateRows: \"repeat(25, 4%)\",\n      bgPosition: \"center\",\n      bgSize: \"cover\",\n      bgRepeat: \"no-repeat\",\n      h: \"100vh\",\n      w: \"100vw\",\n      bg: \"yellow.50\",\n      onKeyDown: handleKeyPress,\n      tabIndex: -1,\n      children: [/*#__PURE__*/_jsx(GridItem, {\n        rowStart: 1,\n        colStart: 1,\n        children: /*#__PURE__*/_jsx(Button, {\n          w: \"10%\",\n          onClick: props.onClickHandler,\n          children: \"<<\"\n        })\n      }), onCombat && /*#__PURE__*/_jsx(GridItem, {\n        rowStart: 3,\n        colStart: 1,\n        rowSpan: 5,\n        colSpan: 3,\n        children: /*#__PURE__*/_jsx(Profile, {\n          user: gInterface.getProfile(agentCombat)\n        })\n      }), /*#__PURE__*/_jsx(GridItem, {\n        rowStart: 9,\n        colStart: 1,\n        rowSpan: 7,\n        colSpan: 6,\n        children: /*#__PURE__*/_jsx(LogOutput, {\n          maxH: \"27.5vh\",\n          summary: detailedCombats\n        })\n      }), /*#__PURE__*/_jsx(GridItem, {\n        rowStart: 16,\n        colStart: 1,\n        rowSpan: 5,\n        colSpan: 3,\n        children: /*#__PURE__*/_jsx(Profile, {\n          user: playerProfile\n        })\n      }), /*#__PURE__*/_jsx(GridItem, {\n        rowStart: 20,\n        colStart: 3,\n        rowSpan: 8,\n        colSpan: 2,\n        children: /*#__PURE__*/_jsx(Management, {\n          user: playerProfile,\n          levelUp: levelUp,\n          boardUp: boardUp\n        })\n      }), /*#__PURE__*/_jsx(GridItem, {\n        rowStart: 18,\n        colStart: 5,\n        rowSpan: 8,\n        colSpan: 4,\n        mb: 2,\n        children: /*#__PURE__*/_jsx(Market, {\n          buyCard: buy,\n          rerollCard: reroll,\n          marketCard: marketCard\n        })\n      }), /*#__PURE__*/_jsx(GridItem, {\n        rowStart: 2,\n        colStart: 8,\n        rowSpan: 16,\n        colSpan: 18,\n        bgColor: \"blackAlpha.300\",\n        children: /*#__PURE__*/_jsxs(Flex, {\n          h: \"100%\",\n          flexDirection: \"column\",\n          justifyContent: \"flex-end \",\n          children: [onCombat && /*#__PURE__*/_jsx(Flex, {\n            h: \"50%\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n            children: /*#__PURE__*/_jsx(Board, {\n              cards: gInterface.getBoard(agentCombat),\n              interactable: false\n            })\n          }), /*#__PURE__*/_jsx(Flex, {\n            h: \"50%\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            children: /*#__PURE__*/_jsx(Board, {\n              cards: playerBoard,\n              interactable: true,\n              sellCard: sellCard,\n              swapCard: swapCard\n            })\n          })]\n        })\n      }), /*#__PURE__*/_jsx(GridItem, {\n        rowStart: 18,\n        colStart: 10,\n        rowSpan: 8,\n        colSpan: 14,\n        children: /*#__PURE__*/_jsx(Bench, {\n          cards: playerBench,\n          interactable: true,\n          sellCard: sellCard,\n          swapCard: swapCard\n        })\n      })]\n    })\n  });\n};\n\nexport default GamingBoard;","map":null,"metadata":{},"sourceType":"module"}