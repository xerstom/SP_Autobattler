{"ast":null,"code":"import Manager from \"./Manager.js\";\nimport { CONFIG } from \"./utils/constants.js\";\nconst PHASE_ONE = 1; // waiting for player position\n\nconst PHASE_TWO = 2; // waiting for next turn\n\nclass GameLoop extends Manager {\n  constructor(gameManager) {\n    super(gameManager);\n    this.currentPhase = 0;\n    this.moneyPerTUrn = CONFIG.MONEY_PER_TURN;\n  }\n\n  start() {\n    // management time\n    this.currentPhase = 2;\n  }\n\n  next(selectedBox) {\n    if (this.currentPhase === PHASE_ONE) {\n      // waiting for position\n      if (!selectedBox || !this.m.canPlayerMove(selectedBox.x, selectedBox.y)) {\n        return -1;\n      }\n\n      this.currentPhase = PHASE_TWO;\n      this.phaseTwo(selectedBox);\n    } else if (this.currentPhase === PHASE_TWO) {\n      // waiting for next turn\n      this.currentPhase = PHASE_ONE;\n      this.phaseOne();\n    }\n\n    return this.currentPhase;\n  }\n\n  phaseOne() {\n    this.m.movePriorAgents();\n  }\n\n  phaseTwo(selectedBox) {\n    this.m.movePlayer(selectedBox);\n    this.m.moveLaterAgents();\n    this.m.setLaterAgentsCache();\n    this.m.generateNewBorders();\n    this.management();\n    this.m.battle();\n    this.m.agentManager.increaseMoneyForAllAgents(this.moneyPerTUrn);\n  }\n\n  management() {\n    this.m.getBots().forEach(agent => agent.strategy.executeTurn(agent, this.m.agentManager, this.m.cardManager));\n  }\n\n}\n\nexport default GameLoop;","map":null,"metadata":{},"sourceType":"module"}