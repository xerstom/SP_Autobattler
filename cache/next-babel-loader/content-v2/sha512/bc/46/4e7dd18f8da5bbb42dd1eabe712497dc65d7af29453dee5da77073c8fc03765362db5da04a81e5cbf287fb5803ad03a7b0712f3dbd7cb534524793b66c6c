{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport Manager from \"./Manager.js\";\nimport { CONFIG } from \"./utils/constants.js\";\nvar PHASE_ONE = 1; // waiting for player position\n\nvar PHASE_TWO = 2; // waiting for next turn\n\nvar GameLoop = /*#__PURE__*/function (_Manager) {\n  _inherits(GameLoop, _Manager);\n\n  var _super = _createSuper(GameLoop);\n\n  function GameLoop(gameManager) {\n    var _this;\n\n    _classCallCheck(this, GameLoop);\n\n    _this = _super.call(this, gameManager);\n    _this.currentPhase = 0;\n    _this.moneyPerTUrn = CONFIG.MONEY_PER_TURN;\n    return _this;\n  }\n\n  _createClass(GameLoop, [{\n    key: \"start\",\n    value: function start() {\n      // management time\n      this.currentPhase = 2;\n    }\n  }, {\n    key: \"next\",\n    value: function next(selectedBox) {\n      if (this.currentPhase === PHASE_ONE) {\n        // waiting for position\n        if (!selectedBox || !this.m.canPlayerMove(selectedBox.x, selectedBox.y)) {\n          return -1;\n        }\n\n        this.currentPhase = PHASE_TWO;\n        this.phaseTwo(selectedBox);\n      } else if (this.currentPhase === PHASE_TWO) {\n        // waiting for next turn\n        this.currentPhase = PHASE_ONE;\n        this.phaseOne();\n      }\n\n      return this.currentPhase;\n    }\n  }, {\n    key: \"phaseOne\",\n    value: function phaseOne() {\n      this.m.movePriorAgents();\n    }\n  }, {\n    key: \"phaseTwo\",\n    value: function phaseTwo(selectedBox) {\n      this.m.movePlayer(selectedBox);\n      this.m.moveLaterAgents();\n      this.m.setLaterAgentsCache();\n      this.m.generateNewBorders();\n      this.management();\n      this.m.battle();\n      this.m.agentManager.increaseMoneyForAllAgents(this.moneyPerTUrn);\n    }\n  }, {\n    key: \"management\",\n    value: function management() {\n      var _this2 = this;\n\n      this.m.getBots().forEach(function (agent) {\n        return agent.strategy.executeTurn(agent, _this2.m.agentManager, _this2.m.cardManager);\n      });\n    }\n  }]);\n\n  return GameLoop;\n}(Manager);\n\nexport default GameLoop;","map":null,"metadata":{},"sourceType":"module"}