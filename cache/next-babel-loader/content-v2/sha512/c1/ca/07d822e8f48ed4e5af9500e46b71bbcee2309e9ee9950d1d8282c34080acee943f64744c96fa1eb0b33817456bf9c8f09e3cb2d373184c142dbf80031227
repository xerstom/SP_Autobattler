{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport { COLOR_HEX, CONFIG } from \"../utils/constants.js\";\n/**\n *\n * @prop {String} name\n * @prop {String} color\n * @prop {Number} life Current Agent life\n * @prop {Object} strategy\n * @prop {Object} position Agent position\n * @prop {Number} position.x\n * @prop {Number} position.y\n * @prop {Number} boardSize Current board size\n * @prop {Number} level Current level (card level max)\n * @prop {Number} money Current money\n * @prop {Number} boardUpPrice Price for a bordSize up\n * @prop {Number} levelUpPrice Price for a level up\n * @prop {Array<GameCard>} board\n * @prop {Array<GameCard>} bench\n *\n * @class Agent\n */\n\nvar Agent = /*#__PURE__*/function () {\n  function Agent(color) {\n    _classCallCheck(this, Agent);\n\n    this.name = \"Mr \".concat(color.charAt(0).toUpperCase() + color.slice(1));\n    this.color = COLOR_HEX[color];\n    this.life = CONFIG.BASE_LIFE;\n    this.boardSize = CONFIG.BASE_BOARD_PLACE;\n    this.level = 1;\n    this.money = CONFIG.BASE_MONEY;\n    this.boardUpPrice = CONFIG.BASE_BOARD_UP_PRICE;\n    this.levelUpPrice = CONFIG.BASE_LEVEL_UP_PRICE;\n    this.board = [];\n    this.bench = []; // list of cards on bench\n  }\n  /**\n   * wether the card already exist in board / bench\n   *\n   * @param {GameCard} card\n   * @returns {Array<GameCard, String>} [card, location]\n   * @memberof Agent\n   */\n\n\n  _createClass(Agent, [{\n    key: \"cardExist\",\n    value: function cardExist(card) {\n      var res = [null, \"\"];\n      res[0] = this.board.find(function (c) {\n        return c.name === card.name;\n      });\n\n      if (res[0]) {\n        res[1] = \"board\";\n      } else {\n        res[0] = this.bench.find(function (c) {\n          return c.name === card.name;\n        });\n\n        if (res[0]) {\n          res[1] = \"bench\";\n        }\n      }\n\n      return res;\n    }\n  }, {\n    key: \"upLevel\",\n    value: function upLevel() {\n      this.level++;\n      this.levelUpPrice = Math.round(this.levelUpPrice * CONFIG.LEVEL_UP_MULTIPLIER);\n    }\n  }, {\n    key: \"upBoard\",\n    value: function upBoard() {\n      this.boardSize++;\n      this.boardUpPrice = Math.round(this.boardUpPrice * CONFIG.BOARD_UP_MULTIPLIER);\n    }\n  }, {\n    key: \"hasEnoughMoney\",\n    value: function hasEnoughMoney(money) {\n      return this.money >= money;\n    }\n  }, {\n    key: \"isBoardFull\",\n    value: function isBoardFull() {\n      return this.board.length === this.boardSize;\n    }\n  }, {\n    key: \"isBenchFull\",\n    value: function isBenchFull() {\n      return this.bench.length === CONFIG.MAX_BENCH_PLACE;\n    }\n  }, {\n    key: \"isLevelMax\",\n    value: function isLevelMax() {\n      return this.level === CONFIG.MAX_LEVEL;\n    }\n  }, {\n    key: \"isBoardSizeMax\",\n    value: function isBoardSizeMax() {\n      return this.boardSize === CONFIG.MAX_BOARD_PLACE;\n    }\n  }, {\n    key: \"setBoard\",\n    value: function setBoard(board) {\n      this.board = board;\n    }\n  }, {\n    key: \"addBoard\",\n    value: function addBoard(card) {\n      this.board.push(card);\n    }\n  }, {\n    key: \"addBench\",\n    value: function addBench(card) {\n      this.bench.push(card);\n    }\n  }, {\n    key: \"rmBoard\",\n    value: function rmBoard(index) {\n      return this.board.splice(index, 1)[0];\n    }\n  }, {\n    key: \"rmBench\",\n    value: function rmBench(index) {\n      return this.bench.splice(index, 1)[0];\n    }\n  }, {\n    key: \"increaseMoney\",\n    value: function increaseMoney(money) {\n      this.money += money;\n    }\n  }, {\n    key: \"decreaseMoney\",\n    value: function decreaseMoney(money) {\n      this.money -= money;\n    }\n  }, {\n    key: \"decreaseLife\",\n    value: function decreaseLife(life) {\n      this.life -= life;\n    }\n  }, {\n    key: \"setNewGamingBoard\",\n    value: function setNewGamingBoard(board, bench) {\n      this.board = board;\n      this.bench = bench;\n    }\n  }]);\n\n  return Agent;\n}();\n\nexport default Agent;","map":null,"metadata":{},"sourceType":"module"}