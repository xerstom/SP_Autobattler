{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport AgentManager from \"./agents/AgentManager.js\";\nimport BattleManager from \"./battles/BattleManager.js\";\nimport CardManager from \"./cards/CardManager.js\";\nimport GameLoop from \"./GameLoop.js\";\nimport MapManager from \"./map/MapManager.js\";\nimport PositionManager from \"./positions/PositionManager.js\";\n/**\n *\n * @prop {Array<Agent>} agents\n * @prop {Array<CardTemplate>} templates\n * @class GameManager\n */\n\nvar GameManager = /*#__PURE__*/function () {\n  function GameManager() {\n    _classCallCheck(this, GameManager);\n\n    this.agentManager = new AgentManager(this);\n    this.positionManager = new PositionManager(this);\n    this.cardManager = new CardManager(this);\n    this.mapManager = new MapManager(this);\n    this.battleManager = new BattleManager(this);\n    this.gameLoop = new GameLoop(this);\n    this.laterAgentsCache = [];\n  } // lifecycle\n\n\n  _createClass(GameManager, [{\n    key: \"init\",\n    value: function init() {\n      this.agentManager.init();\n      this.cardManager.init();\n      this.mapManager.init();\n      this.positionManager.init();\n      this.battleManager.init();\n    }\n  }, {\n    key: \"start\",\n    value: function start() {\n      this.gameLoop.start();\n    } // GAMELOOP\n\n  }, {\n    key: \"next\",\n    value: function next() {\n      var selectedBox = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      return this.gameLoop.next(selectedBox);\n    } // AGENTS\n\n  }, {\n    key: \"getAgent\",\n    value: function getAgent(name) {\n      if (!name) {\n        return this.agentManager.getPlayer();\n      }\n\n      return this.agentManager.getByName(name) || this.agentManager.getPlayer();\n    }\n  }, {\n    key: \"getPlayer\",\n    value: function getPlayer() {\n      return this.agentManager.getPlayer();\n    }\n  }, {\n    key: \"getAgents\",\n    value: function getAgents() {\n      return this.agentManager.getAll();\n    }\n  }, {\n    key: \"getPriorAgents\",\n    value: function getPriorAgents(agent) {\n      return this.agentManager.getPrior(agent || this.agentManager.getPlayer());\n    }\n  }, {\n    key: \"getLaterAgentsCache\",\n    value: function getLaterAgentsCache() {\n      return this.laterAgentsCache;\n    }\n  }, {\n    key: \"setLaterAgentsCache\",\n    value: function setLaterAgentsCache(agent) {\n      this.laterAgentsCache = this.agentManager.getLater(agent || this.agentManager.getPlayer());\n    }\n  }, {\n    key: \"getLaterAgents\",\n    value: function getLaterAgents(agent) {\n      return this.agentManager.getLater(agent || this.agentManager.getPlayer());\n    }\n  }, {\n    key: \"getBots\",\n    value: function getBots() {\n      return this.agentManager.getBots();\n    } // POSITION\n\n  }, {\n    key: \"getPosition\",\n    value: function getPosition(agent) {\n      return this.positionManager.getPosition(agent.name);\n    }\n  }, {\n    key: \"movePlayer\",\n    value: function movePlayer(position) {\n      this.positionManager.move(this.agentManager.getPlayer(), position);\n    }\n  }, {\n    key: \"movePriorAgents\",\n    value: function movePriorAgents() {\n      this.positionManager.moveBots(this.agentManager.getPrior(this.agentManager.getPlayer()));\n    }\n  }, {\n    key: \"moveLaterAgents\",\n    value: function moveLaterAgents() {\n      this.positionManager.moveBots(this.agentManager.getLater(this.agentManager.getPlayer()).slice(1));\n    }\n  }, {\n    key: \"canPlayerMove\",\n    value: function canPlayerMove(x, y) {\n      return this.positionManager.canMove(this.agentManager.getPlayer().name, x, y);\n    }\n  }, {\n    key: \"samePosition\",\n    value: function samePosition(agent1, agent2) {\n      return this.positionManager.samePosition(agent1, agent2);\n    } // getters\n\n  }, {\n    key: \"getMovementPoints\",\n    value: function getMovementPoints() {\n      return this.positionManager.getMovementPoints();\n    }\n  }, {\n    key: \"getNextBorders\",\n    value: function getNextBorders() {\n      return this.mapManager.getNextBorders();\n    }\n  }, {\n    key: \"getGridSize\",\n    value: function getGridSize() {\n      return this.mapManager.getGridSize();\n    }\n  }, {\n    key: \"getMarketCard\",\n    value: function getMarketCard() {\n      return this.cardManager.getMarketCard(this.agentManager.getPlayer().name);\n    } // CARDS\n\n  }, {\n    key: \"rerollCard\",\n    value: function rerollCard(agent) {\n      return this.cardManager.rerollCard(agent || this.agentManager.getPlayer());\n    }\n  }, {\n    key: \"buyCard\",\n    value: function buyCard(agent) {\n      return this.cardManager.buyCard(agent || this.agentManager.getPlayer());\n    }\n  }, {\n    key: \"sellCard\",\n    value: function sellCard(index, location) {\n      return this.cardManager.sellCard(this.agentManager.getPlayer(), index, location);\n    }\n  }, {\n    key: \"swapCard\",\n    value: function swapCard(index, location) {\n      return this.cardManager.swapCard(this.agentManager.getPlayer(), index, location);\n    } // MAP\n\n  }, {\n    key: \"isDisabled\",\n    value: function isDisabled(x, y) {\n      return this.mapManager.isDisabled(x, y);\n    }\n  }, {\n    key: \"willBeDisabled\",\n    value: function willBeDisabled(x, y) {\n      return this.mapManager.willBeDisabled(x, y);\n    }\n  }, {\n    key: \"generateNewBorders\",\n    value: function generateNewBorders() {\n      this.mapManager.generateNewBorders();\n    } // Profile\n\n  }, {\n    key: \"levelUp\",\n    value: function levelUp(agent) {\n      return this.agentManager.levelUp(agent || this.agentManager.getPlayer());\n    }\n  }, {\n    key: \"boardUp\",\n    value: function boardUp(agent) {\n      return this.agentManager.boardUp(agent || this.agentManager.getPlayer());\n    } // battle\n\n  }, {\n    key: \"getBattleSummary\",\n    value: function getBattleSummary() {\n      return this.battleManager.summary();\n    }\n  }, {\n    key: \"battle\",\n    value: function battle() {\n      this.battleManager.setup();\n      this.battleManager.battleAll();\n    }\n  }]);\n\n  return GameManager;\n}();\n\nexport default GameManager;","map":null,"metadata":{},"sourceType":"module"}