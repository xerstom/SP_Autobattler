{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport BoardUpStrategy from \"./managmentStrategies/BoardUpStrategy.js\";\nimport BuyStrategy from \"./managmentStrategies/BuyStrategy.js\";\nimport LevelUpStrategy from \"./managmentStrategies/LevelUpStrategy.js\";\nimport ManagementStrategy from \"./managmentStrategies/ManagementStrategy.js\";\nimport AgressiveTravelStrategy from \"./travelStrategies/AgressiveTravelStrategy.js\";\nimport DefensiveTravelStrategy from \"./travelStrategies/DefensiveTravelStrategy.js\"; // import TravelStrategy from \"./travelStrategies/TravelStrategy.js\";\n\nvar Strategy = /*#__PURE__*/function () {\n  function Strategy(agressivity, levelUpProbability, boardUpProbability) {\n    _classCallCheck(this, Strategy);\n\n    // travelStrategy\n    this.agressivity = agressivity !== null && agressivity !== void 0 ? agressivity : Math.random();\n    this.passivness = 1 - this.agressivity;\n    this.choice = null; // Managment strategy\n\n    var probaLeft = 1;\n    this.levelUpProbability = levelUpProbability !== null && levelUpProbability !== void 0 ? levelUpProbability : Math.random();\n    probaLeft -= this.levelUpProbability;\n    this.boardUpProbability = boardUpProbability < probaLeft ? boardUpProbability : Math.random() * probaLeft;\n    probaLeft -= this.boardUpProbability;\n    this.buyProbability = probaLeft;\n  }\n\n  _createClass(Strategy, [{\n    key: \"getTravelStrategy\",\n    value: function getTravelStrategy() {\n      if (Math.random() < this.agressivity) {\n        return AgressiveTravelStrategy;\n      }\n\n      return DefensiveTravelStrategy;\n    }\n  }, {\n    key: \"getPos\",\n    value: function getPos(positionManager, mapManager, agent) {\n      return this.getTravelStrategy().generatePos(agent, mapManager, positionManager);\n    }\n  }, {\n    key: \"executeTurn\",\n    value: function executeTurn(agent, agentManager, cardManager) {\n      return ManagementStrategy._executeTurn(this.getManagmentStrategy(), this, agent, agentManager, cardManager);\n    }\n  }, {\n    key: \"getManagmentStrategy\",\n    value: function getManagmentStrategy() {\n      if (this.choice) {\n        return this.choice;\n      }\n\n      var rand = Math.random();\n\n      if (rand < this.buyProbability) {\n        this.choice = BuyStrategy;\n        return BuyStrategy;\n      }\n\n      if (rand < this.boardUpProbability + this.buyProbability) {\n        this.choice = BoardUpStrategy;\n        return BoardUpStrategy;\n      }\n\n      this.choice = LevelUpStrategy;\n      return LevelUpStrategy;\n    }\n  }]);\n\n  return Strategy;\n}();\n\nexport { Strategy as default };","map":null,"metadata":{},"sourceType":"module"}