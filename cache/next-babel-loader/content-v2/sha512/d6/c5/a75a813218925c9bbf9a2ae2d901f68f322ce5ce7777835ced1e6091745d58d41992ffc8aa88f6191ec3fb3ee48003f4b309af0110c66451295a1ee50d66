{"ast":null,"code":"import FightCard from \"../cards/FightCard.js\";\nimport GameCard from \"../cards/GameCard.js\";\nimport TemplateCard from \"../cards/TemplateCard.js\";\nimport { displays, LEVEL_INCR, LEVEL_PROPORTION } from \"../utils/constants.js\";\nimport { rand } from \"../utils/utils.js\";\n\nfunction createTemplateCard(name, level, display) {\n  return new TemplateCard(name, level, display);\n}\n\nexport function generateTemplateCards(x) {\n  const cards = [];\n  const displaysIndexes = [...Array(x).keys()];\n  let incr = 0;\n\n  for (let j = 0; j < LEVEL_PROPORTION.length; ++j) {\n    const nCard = Math.floor(x * LEVEL_PROPORTION[j]);\n\n    for (let i = 0; i < nCard; ++i, ++incr) {\n      const r = rand(0, displaysIndexes.length - 1);\n      cards.push(createTemplateCard(incr, j, displays[displaysIndexes[r]]));\n      displaysIndexes.splice(r, 1);\n    }\n  }\n\n  return cards;\n}\n\nfunction createGameCard(template) {\n  return new GameCard(template.name, template.level, template.attack, template.life, template.adaptative, template.price, template.displayName, template.displayImage);\n}\n\nexport function generateGameCard(templates, level) {\n  const max = Math.floor(templates.length * LEVEL_INCR[level - 1]);\n  const index = rand(0, max - 1);\n  return createGameCard(templates[index]);\n}\nexport function generateGameCards(x, templates) {\n  const cards = [];\n\n  for (let i = 0; i < x; ++i) {\n    cards.push(generateGameCard(templates, 1));\n  }\n\n  return cards;\n}\n\nfunction createFightCard(gameCard) {\n  return new FightCard(gameCard.name, gameCard.displayName, gameCard.attack, gameCard.life);\n}\n\nexport function generateFightCards(board) {\n  const cards = [];\n\n  for (const card of board) {\n    cards.push(createFightCard(card));\n  }\n\n  return cards;\n}","map":null,"metadata":{},"sourceType":"module"}