{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\n/* eslint-disable no-magic-numbers */\nimport { Button, GridItem } from \"@chakra-ui/react\";\nimport React, { useState } from \"react\";\n\nvar percentageCalc = function percentageCalc(colors, i) {\n  return Math.round(100 / colors.length) * (i + 1);\n};\n\nvar colorCalc = function colorCalc(colors) {\n  if (colors.length === 1) {\n    return colors[0];\n  }\n\n  var str = \"linear-gradient(\".concat(colors.length === 2 ? 45 : 90, \"deg\");\n\n  for (var i = 0; i < colors.length - 1; i++) {\n    str += \", \".concat(colors[i], \" \").concat(percentageCalc(colors, i), \"%, \").concat(colors[i + 1], \" \").concat(percentageCalc(colors, i), \"%\");\n  }\n\n  return \"\".concat(str, \");\");\n};\n\nvar Box = function Box(props) {\n  var x = props.x,\n      y = props.y,\n      selectable = props.selectable,\n      colors = props.colors,\n      perc = props.perc,\n      disable = props.disable,\n      activeColors = props.activeColors;\n\n  var _useState = useState(null),\n      colorBg = _useState[0],\n      setColor = _useState[1];\n\n  var handleOnClick = function handleOnClick() {\n    if (!selectable(x, y)) {\n      setTimeout(function () {\n        return setColor(null);\n      }, 400);\n      setColor(\"red\");\n    }\n  };\n\n  var bgColor = colorCalc(colors);\n  var activeColor = colorCalc(activeColors);\n\n  if (!bgColor.includes(\"%\")) {\n    activeColor = activeColor !== bgColor ? activeColor : \"black\";\n  }\n\n  return /*#__PURE__*/_jsx(GridItem, {\n    h: \"\".concat(perc, \"vw\"),\n    w: \"\".concat(perc, \"vw\"),\n    border: \"solid \".concat(activeColor, \" \").concat(activeColor === \"black\" ? \"1px\" : \"5px\"),\n    borderRadius: \"none\",\n    _active: {\n      borderColor: activeColor // borderColor: \"#FF0000\",\n\n    },\n    _focus: {\n      borderColor: activeColor // borderColor: \"#FF0000\",\n\n    },\n    children: /*#__PURE__*/_jsx(Button, {\n      disabled: disable,\n      borderRadius: \"none\",\n      bg: colorBg !== null && colorBg !== void 0 ? colorBg : bgColor,\n      w: \"100%\",\n      h: \"100%\",\n      _hover: {\n        bg: colorBg !== null && colorBg !== void 0 ? colorBg : bgColor\n      },\n      _active: {},\n      _focus: {},\n      onClick: handleOnClick\n    })\n  });\n};\n\nexport default Box;","map":null,"metadata":{},"sourceType":"module"}