{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport TravelStrategy from \"./TravelStrategy.js\";\n\nvar DefensiveTravelStrategy = /*#__PURE__*/function (_TravelStrategy) {\n  _inherits(DefensiveTravelStrategy, _TravelStrategy);\n\n  var _super = _createSuper(DefensiveTravelStrategy);\n\n  function DefensiveTravelStrategy() {\n    _classCallCheck(this, DefensiveTravelStrategy);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(DefensiveTravelStrategy, null, [{\n    key: \"generatePos\",\n    value: function generatePos(agent, mapManager, positionManager) {\n      var meanX = 0;\n      var meanY = 0;\n      var agents = positionManager.getAllPosition().filter(function (a) {\n        return a.name !== agent.name;\n      });\n      agents.forEach(function (a) {\n        meanX += a.x;\n        meanY += a.y;\n      });\n      meanX /= agents.length;\n      meanY /= agents.length;\n      meanX = mapManager.getGridSize() - Math.round(meanX);\n      meanY = mapManager.getGridSize() - Math.round(meanY);\n      return positionManager.getClosestPosition(positionManager.getPosition(agent.name), {\n        x: meanX,\n        y: meanY\n      }, mapManager);\n    }\n  }]);\n\n  return DefensiveTravelStrategy;\n}(TravelStrategy);\n\nexport { DefensiveTravelStrategy as default };","map":null,"metadata":{},"sourceType":"module"}