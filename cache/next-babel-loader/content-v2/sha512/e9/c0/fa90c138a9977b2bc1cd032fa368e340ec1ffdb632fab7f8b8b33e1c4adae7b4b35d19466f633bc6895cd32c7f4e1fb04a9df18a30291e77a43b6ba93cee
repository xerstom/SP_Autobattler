{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { generateGameCard, generateGameCards, generateTemplateCards } from \"../factory/CardFactory.js\";\nimport Manager from \"../Manager.js\";\nimport { CONFIG } from \"../utils/constants.js\";\n\nvar CardManager = /*#__PURE__*/function (_Manager) {\n  _inherits(CardManager, _Manager);\n\n  var _super = _createSuper(CardManager);\n\n  function CardManager(gameManager) {\n    var _this;\n\n    _classCallCheck(this, CardManager);\n\n    _this = _super.call(this, gameManager);\n    _this.templates = generateTemplateCards(CONFIG.TEMPLATE_CARDS);\n    _this.marketCards = new Map();\n    _this.buffPercentage = CONFIG.BUFF_PERCENTAGE;\n    return _this;\n  } // init\n\n\n  _createClass(CardManager, [{\n    key: \"init\",\n    value: function init() {\n      var _this2 = this;\n\n      this.m.getAgents().forEach(function (e) {\n        return _this2.initCards(e, CONFIG.BASE_CARDS);\n      });\n    }\n  }, {\n    key: \"initCards\",\n    value: function initCards(agent, x) {\n      agent.setBoard(generateGameCards(x, this.templates));\n      this.setMarket(agent.name, generateGameCard(this.templates, 1));\n    } // setters / getters\n\n  }, {\n    key: \"setMarket\",\n    value: function setMarket(name, card) {\n      this.marketCards.set(name, card);\n    }\n  }, {\n    key: \"getMarketCard\",\n    value: function getMarketCard(name) {\n      return this.marketCards.get(name);\n    }\n  }, {\n    key: \"getTemplate\",\n    value: function getTemplate(predicate) {\n      return this.templates.find(predicate);\n    } // Management\n\n  }, {\n    key: \"rerollMarketCard\",\n    value: function rerollMarketCard(agent) {\n      this.setMarket(agent.name, generateGameCard(this.templates, agent.level));\n    }\n  }, {\n    key: \"rerollCard\",\n    value: function rerollCard(agent) {\n      if (agent.hasEnoughMoney(CONFIG.REROLL_PRICE)) {\n        agent.decreaseMoney(CONFIG.REROLL_PRICE);\n        this.rerollMarketCard(agent);\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"getPercentageBuff\",\n    value: function getPercentageBuff(marketCard) {\n      return Math.round((marketCard.life + marketCard.attack) * this.buffPercentage);\n    }\n  }, {\n    key: \"buyCard\",\n    value: function buyCard(agent) {\n      var res = [false, \"\"];\n      var marketCard = this.getMarketCard(agent.name);\n\n      if (!agent.hasEnoughMoney(marketCard.price)) {\n        return res;\n      }\n\n      var _agent$cardExist = agent.cardExist(marketCard),\n          _agent$cardExist2 = _slicedToArray(_agent$cardExist, 2),\n          existing = _agent$cardExist2[0],\n          location = _agent$cardExist2[1];\n\n      if (existing) {\n        existing.buff(this.getPercentageBuff(marketCard));\n        res[1] = location;\n      } else if (agent.isBoardFull()) {\n        if (agent.isBenchFull()) {\n          return res;\n        }\n\n        agent.addBench(marketCard);\n        res[1] = \"bench\";\n      } else {\n        agent.addBoard(marketCard);\n        res[1] = \"board\";\n      }\n\n      res[0] = true;\n      agent.decreaseMoney(marketCard.price);\n      this.rerollMarketCard(agent);\n      return res;\n    }\n  }, {\n    key: \"sellCard\",\n    value: function sellCard(agent, index, location) {\n      var card = null;\n\n      if (location === \"board\") {\n        card = agent.rmBoard(index);\n      } else if (location === \"bench\") {\n        card = agent.rmBench(index);\n      } else {\n        return false;\n      }\n\n      agent.increaseMoney(card.price);\n      return true;\n    }\n  }, {\n    key: \"swapCard\",\n    value: function swapCard(agent, index, location) {\n      var card = null;\n\n      if (location === \"board\" && !agent.isBenchFull()) {\n        card = agent.rmBoard(index);\n        agent.addBench(card);\n      } else if (location === \"bench\" && !agent.isBoardFull()) {\n        card = agent.rmBench(index);\n        agent.addBoard(card);\n      } else {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"optimizeBoards\",\n    value: function optimizeBoards(board, bench, boardMaxlength) {\n      var cards = [].concat(_toConsumableArray(board), _toConsumableArray(bench));\n      cards.sort(function (a, b) {\n        return b.stats - a.stats;\n      });\n      var updatedBoard = cards.slice(0, boardMaxlength);\n      var updatedBench = cards.slice(boardMaxlength);\n      return [updatedBoard, updatedBench];\n    }\n  }]);\n\n  return CardManager;\n}(Manager);\n\nexport default CardManager;","map":null,"metadata":{},"sourceType":"module"}